#!/usr/bin/env python
# encoding: utf-8

import os
import sys
import argparse

from yaml import load

import logging

# Set up the logger
logger = logging.getLogger('seasnake')
# Use a console handler, set it to debug by default
logger_ch = logging.StreamHandler()
logger.setLevel(logging.INFO)
log_formatter = logging.Formatter(('%(asctime)s %(levelname)s:%(process)s'
                                   ' %(lineno)s:%(module)s:%(funcName)s()'
                                   ' %(message)s'))
logger_ch.setFormatter(log_formatter)
logger.addHandler(logger_ch)

from api import Client


def bail(parser, ret=1, msg=""):
    if msg:
        print(msg)
    # parser.print_usage()
    parser.print_help()
    sys.exit(ret)
#bail()


def get_config(args):

    config = vars(args)
    res = vars(args)

    # Open the config file, if it exists
    cpath = os.path.expanduser(args.config)
    if os.path.exists(cpath):
        logger.debug("Opening config: {}".format(args.config))
        fd = open(cpath)
        res.update(load(fd))
        config['client_id'] = config['client_id'] or res['client_id']
        config['client_key'] = config['client_key'] or res['client_key']
        config['json'] = config['json'] or res['json']
        config['debug_level'] = config['debug_level'] or res['debug_level']
        # res.update(config)
        # config = res

    logger.debug(str(args))
    logger.debug(str(config))

    return argparse.Namespace(**config)
#get_config()


def main():

    parser = argparse.ArgumentParser("seasnake")
    parser.add_argument('-c', '--client_id',
                        default=False,
                        help=("Required, Digital Ocean API Client ID"))
    parser.add_argument('-k', '--client_key',
                        default=False,
                        help=("Required, Digital Ocean API Key"))
    parser.add_argument('-j', '--json',
                        default=False,
                        help="Output results as raw JSON.",
                        action="store_true")
    parser.add_argument('-g', '--config',
                        default="~/.config/seasnake.yml",
                        help="Specify a config file"
                        )
    parser.add_argument('--debug-level',
                        default=False,
                        dest='debug_level',
                        help=("Set the debug level"))

    subparsers = parser.add_subparsers(dest='subparser_name',
                                       title='SeaSnake Commands',
                                       description="Description",
                                       help="Halp")

    # Add a subparser for richer Droplet management.
    #
    # Create a new Droplet:
    #   seasname droplet --name="New Name" --region=1 --image=3 --size=1
    #
    # Edit an existing Droplet, specify an existing ID. Change the image size
    #   seasname droplet -id=412343 --image=2
    #
    # Edit an existing Droplet, specify an existing ID. Change the image size
    #   seasname droplet -id=412343 --rebuild
    #
    # Status of an existing Droplet, specify just an existing ID.
    #   seasname droplet -id=412343
    parser_droplet = subparsers.add_parser('droplet',
                                           help=("Some great help "
                                                 "on manging Droplets.")
                                           )
    parser_droplet.add_argument('-n', '--name',
                                default=False,
                                help=("Name of new Droplet"))
    parser_droplet.add_argument('-i', '--id',
                                default=False,
                                help=("ID number of Droplet"))
    parser_droplet.add_argument('-r', '--region',
                                default=False,
                                help=("ID number of Droplet region"))
    parser_droplet.add_argument('-m', '--image',
                                default=False,
                                help=("ID number of Droplet image"))
    parser_droplet.add_argument('-s', '--size',
                                default=False,
                                help=("ID number of Droplet size"))
    parser_droplet.add_argument('--rebuild',
                                default=False,
                                help=("Rebuild the droplet"))

    ### Droplet ###
    def droplet(args, cl):
        print("droplet: {}".format(args))

        # Is this a new droplet?
        if args.name and args.region and args.image:
            drop = Droplet.new(cl,
                               args.name,
                               args.image,
                               args.size,
                               args.region)

        drops, res = cl.droplets()
        print_res(drops, res)
    #droplet()
    parser_droplet.set_defaults(func=droplet)

    ### Region ###
    parser_region = subparsers.add_parser('region',
                                          help=("List available regions.")
                                          )

    def region(args, cl):
        logging.debug("region")
        regions, res = cl.regions()
        print_res(regions, res)
    #region()
    parser_region.set_defaults(func=region)

    ### Size ###
    parser_size = subparsers.add_parser('size',
                                        help=("List available sizes."),
                                        )

    def size(args, sl):
        logging.debug("size")
        sizes, res = cl.sizes()
        print_res(sizes, res)
    #size()
    parser_size.set_defaults(func=size)

    ### Image ###
    parser_image = subparsers.add_parser('image',
                                         help=("List available images.")
                                         )

    def image(args, cl):
        logging.debug("image")
        images, res = cl.images()
        print_res(images, res)
    #image()
    parser_image.set_defaults(func=image)

    ### SSH Keys ###
    parser_sshkey = subparsers.add_parser('sshkey',
                                          help=("List available ssh-keys."),
                                          )

    def sshkey(args, cl):
        logging.debug("sshkey")
        skeys, res = cl.ssh_keys()
        print_res(skeys, res)
    #sshkey()
    parser_sshkey.set_defaults(func=sshkey)

    ### Report ###
    parser_report = subparsers.add_parser('report')

    def report(args, cl):
        logging.debug("report")
        region(args, cl)
        image(args, cl)
        size(args, cl)
        sshkey(args, cl)
        droplet(args, cl)
    #report()
    parser_report.set_defaults(func=report)

    ### Process the args ###
    # If no subparser was selected, just run report

    subc = False
    for ch in subparsers.choices:
        if ch in sys.argv:
            subc = True
            break
    # end for ch in subparsers.choices

    if not subc:
        sys.argv.append('report')
    args = parser.parse_args()

    if args.debug_level:
        logger.setLevel(getattr(logging, args.debug_level.upper()))

    def print_res(l, res):
        if args.json:
            print(res.text)
        else:
            print("\n".join([str(i) for i in l]))

    config = get_config(args)

    if config.debug_level:
        logger.setLevel(getattr(logging, args.debug_level.upper()))

    if not config.client_id:
        bail(parser, msg="No API client id provided.")
    if not config.client_key:
        bail(parser, msg="No API client key provide.")

    try:
        cl = Client(config.client_id, config.client_key)
        args.func(args, cl)

    except Exception as e:
        if logger.getEffectiveLevel() == logging.DEBUG:
            raise
        bail(parser, msg=e)

# main()

if __name__ == '__main__':
    main()
