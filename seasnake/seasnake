#!/usr/bin/env python
# encoding: utf-8

import sys
import argparse

import logging

# Set up the logger
logger = logging.getLogger('seasnake')
# Use a console handler, set it to debug by default
logger_ch = logging.StreamHandler()
logger.setLevel(logging.DEBUG)
# logger.setLevel(logging.INFO)
log_formatter = logging.Formatter(('%(asctime)s %(levelname)s:%(process)s'
                                   ' %(lineno)s:%(module)s:%(funcName)s()'
                                   ' %(message)s'))
logger_ch.setFormatter(log_formatter)
logger.addHandler(logger_ch)

from api import Client


def bail(parser, ret=1, msg=""):
    if msg:
        print(msg)
    # parser.print_usage()
    parser.print_help()
    sys.exit(ret)
#bail()


def main():

    parser = argparse.ArgumentParser("seasnake")
    parser.add_argument('-c', '--client_id',
                        default=False,
                        help=("Required, Digital Ocean API Client ID"))
    parser.add_argument('-k', '--client_key',
                        default=False,
                        help=("Required, Digital Ocean API Key"))
    parser.add_argument('-d', '--droplets',
                        default=False,
                        help=("List Droplets."),
                        action="store_true")
    parser.add_argument('-r', '--regions',
                        default=False,
                        help=("List available regions."),
                        action="store_true")
    parser.add_argument('-s', '--sizes',
                        default=False,
                        help=("List available sizes."),
                        action="store_true")
    parser.add_argument('-i', '--images',
                        default=False,
                        help=("List available images."),
                        action="store_true")
    parser.add_argument('--ssh-keys',
                        default=False,
                        dest='ssh_keys',
                        help=("List available ssh-keys."),
                        action="store_true")
    parser.add_argument('-j', '--json',
                        default=False,
                        help="Output results as raw JSON.",
                        action="store_true")

    args = parser.parse_args()

    if not args.client_id:
        bail(parser, msg="No API client id provided.")
    if not args.client_key:
        bail(parser, msg="No API client key provide.")

    def print_res(l, res):
        if args.json:
            print(res.text)
        else:
            print("\n".join([str(i) for i in l]))

    try:
        cl = Client(args.client_id, args.client_key)
        if args.droplets:
            drops, res = cl.droplets()
            print_res(drops, res)

        if args.regions:
            regions, res = cl.regions()
            print_res(regions, res)

        if args.sizes:
            sizes, res = cl.sizes()
            print_res(sizes, res)

        if args.images:
            images, res = cl.images()
            print_res(images, res)

        if args.ssh_keys:
            skeys, res = cl.ssh_keys()
            print_res(skeys, res)

    except Exception as e:
        if logger.getEffectiveLevel() == logging.DEBUG:
            raise
        bail(parser, msg=e)

# main()

if __name__ == '__main__':
    main()
